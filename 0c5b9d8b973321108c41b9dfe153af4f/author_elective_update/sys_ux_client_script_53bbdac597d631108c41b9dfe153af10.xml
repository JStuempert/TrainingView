<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="DELETE">
        <includes>e75113c0c3302010de10a0f89d40dd0e</includes>
        <macroponent display_value="List Default Admins">72bb5ac597d631108c41b9dfe153af11</macroponent>
        <name>listUserPrefState</name>
        <preset/>
        <required_translations>[ ]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
function handler({api, event, helpers, imports}) {
    // event name
    const eventName = event.name;
    
    // import the getUserPreference method from userPreferenceUtils script includes
    const {
        getUserPreference
    } = imports["sn_record_page.userPreferenceUtils"](api.context.props.userPrefs);

    /**
     * setWrapListText - toggle the srap list text behavior
     */
    const setWrapListText = () => {
        // show preference name constant
        const WRAP_LIST_TEXT_PREF_NAME = "workspace.wrapListText";

        // fetch the user's wrap list text preference value
        const pref = getUserPreference(WRAP_LIST_TEXT_PREF_NAME);

        api.setState('wrapListText', pref);
    };

    /**
     * onLoadUserPreference - if User pref from DR lookup exists, save it to client state.
     */
    const onLoadUserPreference = (userPrefs) => {
        if(userPrefs.length > 0) {
            userPrefs.forEach((userPref) => {
                switch(userPref.name) {
                    case api.state.listRatioPreference:
                        if(userPref.value) 
                            api.setState('listDividerPosition', userPref.value);
                        break;
                    case api.state.listMenuOpenPreference:
                        const closed = userPref.value === 'false';
                        api.setState('listMenuOpen', !closed);
                        api.setState('listDisplayPanes', closed? 'right': 'both');
                        break;
                }
            });
        }
    };

    /**
     * onLoadListPref - When page is loading, read the list ratio preference via DR
     */
    const onLoadListPref = () => {
        // Set the preferences we want to load
        api.setState('listPreferences', api.state.listRatioPreference + ',' + api.state.listMenuOpenPreference);

        // the preference name is loaded by DR from client state var, this 
        // calls the DR to look it up. Then DR calls the DATA_FETCH_SUCCEEDED
        // event handler (in switch statement below) to update state variable    
        api.data.getListPreferences.refresh();
    };

    // handle the wrap list text collapsed state based on the macroponent ready & 
    // macroponent property change events
    switch(eventName) {
        case 'MACROPONENT_READY':
            setWrapListText();
            onLoadListPref();
            break;

        case 'MACROPONENT_PROPERTY_CHANGED':
            if(event.payload.name === 'userPrefs') 
                setWrapListText();    
            break;

        case 'DATA_FETCH_SUCCEEDED':
            if (event.elementId === 'getListPreferences') 
                onLoadUserPreference(api.data.getListPreferences.result.preferences);
            break;

        default:
            break;
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-11-02 18:32:10</sys_created_on>
        <sys_id>53bbdac597d631108c41b9dfe153af10</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>listUserPrefState</sys_name>
        <sys_package display_value="TrainingView" source="x_1034401_traini_0">0c5b9d8b973321108c41b9dfe153af4f</sys_package>
        <sys_policy/>
        <sys_scope display_value="TrainingView">0c5b9d8b973321108c41b9dfe153af4f</sys_scope>
        <sys_update_name>sys_ux_client_script_53bbdac597d631108c41b9dfe153af10</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-02 18:32:10</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="TrainingView">0c5b9d8b973321108c41b9dfe153af4f</application>
        <file_path/>
        <instance_id>3e8f7752db3fdf4089535d00cf961998</instance_id>
        <instance_name>dev69981</instance_name>
        <name>sys_ux_client_script_53bbdac597d631108c41b9dfe153af10</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ux_client_script"&gt;&lt;sys_ux_client_script action="INSERT_OR_UPDATE"&gt;&lt;includes&gt;e75113c0c3302010de10a0f89d40dd0e&lt;/includes&gt;&lt;macroponent display_value="List Default Admins"&gt;72bb5ac597d631108c41b9dfe153af11&lt;/macroponent&gt;&lt;name&gt;listUserPrefState&lt;/name&gt;&lt;preset/&gt;&lt;required_translations&gt;[ ]&lt;/required_translations&gt;&lt;script&gt;&lt;![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
function handler({api, event, helpers, imports}) {
    // event name
    const eventName = event.name;
    
    // import the getUserPreference method from userPreferenceUtils script includes
    const {
        getUserPreference
    } = imports["sn_record_page.userPreferenceUtils"](api.context.props.userPrefs);

    /**
     * setWrapListText - toggle the srap list text behavior
     */
    const setWrapListText = () =&gt; {
        // show preference name constant
        const WRAP_LIST_TEXT_PREF_NAME = "workspace.wrapListText";

        // fetch the user's wrap list text preference value
        const pref = getUserPreference(WRAP_LIST_TEXT_PREF_NAME);

        api.setState('wrapListText', pref);
    };

    /**
     * onLoadUserPreference - if User pref from DR lookup exists, save it to client state.
     */
    const onLoadUserPreference = (userPrefs) =&gt; {
        if(userPrefs.length &gt; 0) {
            userPrefs.forEach((userPref) =&gt; {
                switch(userPref.name) {
                    case api.state.listRatioPreference:
                        if(userPref.value) 
                            api.setState('listDividerPosition', userPref.value);
                        break;
                    case api.state.listMenuOpenPreference:
                        const closed = userPref.value === 'false';
                        api.setState('listMenuOpen', !closed);
                        api.setState('listDisplayPanes', closed? 'right': 'both');
                        break;
                }
            });
        }
    };

    /**
     * onLoadListPref - When page is loading, read the list ratio preference via DR
     */
    const onLoadListPref = () =&gt; {
        // Set the preferences we want to load
        api.setState('listPreferences', api.state.listRatioPreference + ',' + api.state.listMenuOpenPreference);

        // the preference name is loaded by DR from client state var, this 
        // calls the DR to look it up. Then DR calls the DATA_FETCH_SUCCEEDED
        // event handler (in switch statement below) to update state variable    
        api.data.getListPreferences.refresh();
    };

    // handle the wrap list text collapsed state based on the macroponent ready &amp; 
    // macroponent property change events
    switch(eventName) {
        case 'MACROPONENT_READY':
            setWrapListText();
            onLoadListPref();
            break;

        case 'MACROPONENT_PROPERTY_CHANGED':
            if(event.payload.name === 'userPrefs') 
                setWrapListText();    
            break;

        case 'DATA_FETCH_SUCCEEDED':
            if (event.elementId === 'getListPreferences') 
                onLoadUserPreference(api.data.getListPreferences.result.preferences);
            break;

        default:
            break;
    }
}]]&gt;&lt;/script&gt;&lt;script_api_version&gt;2.0.0&lt;/script_api_version&gt;&lt;sys_class_name&gt;sys_ux_client_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-11-02 18:32:10&lt;/sys_created_on&gt;&lt;sys_id&gt;53bbdac597d631108c41b9dfe153af10&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;listUserPrefState&lt;/sys_name&gt;&lt;sys_package display_value="TrainingView" source="x_1034401_traini_0"&gt;0c5b9d8b973321108c41b9dfe153af4f&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="TrainingView"&gt;0c5b9d8b973321108c41b9dfe153af4f&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ux_client_script_53bbdac597d631108c41b9dfe153af10&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-11-02 18:32:10&lt;/sys_updated_on&gt;&lt;target&gt;macroponent&lt;/target&gt;&lt;type&gt;default&lt;/type&gt;&lt;/sys_ux_client_script&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1130330687</payload_hash>
        <record_name>listUserPrefState</record_name>
        <reverted_from/>
        <source>1226f970970031108c41b9dfe153afe1</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-11-02 18:32:10</sys_created_on>
        <sys_id>2fbbdac597d631108c41b9dfe153af17</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>18b914e9f8d0000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-02 18:32:10</sys_updated_on>
        <type>UX Client Script</type>
        <update_guid>a3bbdac5bbd631109c28e3feeacd4b17</update_guid>
        <update_guid_history>a3bbdac5bbd631109c28e3feeacd4b17:-1130330687</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-11-02 18:32:38</sys_created_on>
        <sys_db_object display_value="" name="sys_ux_client_script">sys_ux_client_script</sys_db_object>
        <sys_id>80c212c75c7f4b629f86a49503569cf9</sys_id>
        <sys_metadata>53bbdac597d631108c41b9dfe153af10</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>listUserPrefState</sys_name>
        <sys_package display_value="TrainingView" source="x_1034401_traini_0">0c5b9d8b973321108c41b9dfe153af4f</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="TrainingView">0c5b9d8b973321108c41b9dfe153af4f</sys_scope>
        <sys_scope_delete display_value="">5901bfb0f54848a3a5a6b9fe125182e1</sys_scope_delete>
        <sys_update_name>sys_ux_client_script_53bbdac597d631108c41b9dfe153af10</sys_update_name>
        <sys_update_version display_value="sys_ux_client_script_53bbdac597d631108c41b9dfe153af10">2fbbdac597d631108c41b9dfe153af17</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-02 18:32:38</sys_updated_on>
    </sys_metadata_delete>
</record_update>
